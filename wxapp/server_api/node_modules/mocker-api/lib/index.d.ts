import { Request, Response, NextFunction, Application } from 'express';
import bodyParser from 'body-parser';
import httpProxy from 'http-proxy';
import chokidar from 'chokidar';
export declare type MockerResultFunction = ((req: Request, res: Response, next?: NextFunction) => void);
export declare type MockerResult = string | {
    [key: string]: any;
} | MockerResultFunction;
export interface Mocker {
    _proxy?: MockerOption;
    [key: string]: MockerResult;
}
export interface MockerOption {
    changeHost?: boolean;
    pathRewrite?: {
        [key: string]: 'string';
    };
    proxy?: {
        [key: string]: 'string';
    };
    httpProxy?: {
        options?: httpProxy.ServerOptions;
        listeners?: {
            [key: string]: () => void;
        };
    };
    bodyParserConf?: {
        [key: string]: 'raw' | 'text' | 'urlencoded' | 'json';
    };
    bodyParserJSON?: bodyParser.OptionsJson;
    bodyParserText?: bodyParser.OptionsText;
    bodyParserRaw?: bodyParser.Options;
    bodyParserUrlencoded?: bodyParser.OptionsUrlencoded;
    watchOptions?: chokidar.WatchOptions;
    header?: {
        [key: string]: string | number | string[];
    };
}
export default function (app: Application, watchFile: string | string[], conf?: MockerOption): (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("express-serve-static-core").Query>, res: Response<any>, next: NextFunction) => void;
