{"version":3,"sources":["../../src/bin/mocker.ts"],"names":["process","argv","slice","length","console","log","color","red","yellow","mockpath","require","resolve","path","HOST","env","DEFAULT_PORT","parseInt","PORT","String","app","all","req","res","next","green","method","url","header","listen","localIpUrl","protocol","host","port","localUrl","lanUrl","on","error","syscall","bind","code","exit"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport path from 'path';\nimport prepareUrls from 'local-ip-url/prepareUrls';\nimport detect from 'detect-port';\nimport color from 'colors-cli/safe';\nimport express from 'express';\nimport apiMocker from '../';\n\n(async () => {\n  if (!process.argv.slice(2).length) {\n    console.log(color.red('Error: Need to pass parameters!'));\n    console.log(`E.g: ${color.yellow('mocker <File path>')}\\n`);\n    return;\n  }\n  let mockpath = process.argv[2];\n\n  mockpath = require.resolve(path.resolve(mockpath));\n\n  const HOST = process.env.HOST || '0.0.0.0';\n  let DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3721;\n  const PORT = await detect(DEFAULT_PORT);\n\n  if (DEFAULT_PORT !== PORT) {\n    DEFAULT_PORT = PORT;\n  }\n  process.env.PORT = String(DEFAULT_PORT);\n  const app = express();\n\n  app.all('/*', (req, res, next) => {\n    console.log(`${color.green(req.method)} - ${req.url}`);\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Content-Type,Content-Length,Authorization,Accept,X-Requested-With');\n    res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS');\n    next();\n  });\n\n  apiMocker(app, mockpath);\n\n  app.listen(DEFAULT_PORT, () => {\n    const localIpUrl = prepareUrls({\n      protocol: 'http',\n      host: HOST,\n      port: DEFAULT_PORT,\n    });\n    console.log(`> Server Listening at Local: ${color.green(localIpUrl.localUrl)}`);\n    console.log(`>           On Your Network: ${color.green(localIpUrl.lanUrl)}\\n`);\n  });\n  /**\n   * Event listener for HTTP server \"error\" event.\n   */\n  app.on('error', (error: any) => {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n    const bind = typeof PORT === 'string' ? 'Pipe ' + PORT : 'Port ' + PORT;\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n      case 'EACCES':\n        console.error(`${bind} requires elevated privileges`); // eslint-disable-line\n        process.exit(1);\n        break;\n      case 'EADDRINUSE':\n        console.error(`${bind} is already in use`); // eslint-disable-line\n        process.exit(1);\n        break;\n      default:\n        throw error;\n    }\n  });\n})();\n"]}